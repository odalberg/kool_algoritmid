
/**
 * This class presents fractions of form n/d where n and d are integer numbers.
 * Basic operations and arithmetics for fractions are provided.
 */
public class Answer implements Comparable<Answer> {

  public static void main(String[] param) {
		
		Answer see = new Answer(2, 5);
		Answer teine = new Answer(6, 2);
		Answer vastus = see.minus(teine);
		System.out.println(vastus.getNumerator() + "/"
				+ vastus.getDenominator());
		
		System.out.println(Answer.valueOf("4/-10"));
	}
	private int lugeja;
	private int nimetaja;

	/**
	 * Constructor.
	 * 
	 * @param a
	 *            numerator
	 * @param b
	 *            denominator > 0
	 */
	public Answer(int a, int b) {
		
		if (b == 0) {
			throw new IllegalArgumentException("Nulliga jagada kahjuks ei saa!");	
		}
		if(b < 0) {
			b = Math.abs(b);
			a = (-1) * a;
		}
		lugeja = a/syt(a,b);
		nimetaja = b/syt(a,b);
	}

	/**
	 * Public method to access the numerator field.
	 * 
	 * @return numerator
	 */
	public int getNumerator() {
		return lugeja;
	}

	/**
	 * Public method to access the denominator field.
	 * 
	 * @return denominator
	 */
	public int getDenominator() {
		return nimetaja;
	}

	/**
	 * Conversion to string.
	 * 
	 * @return string representation of the fraction
	 */
	@Override
	public String toString() {
		return lugeja + "/" + nimetaja;
	}

	/**
	 * Equality test.
	 * 
	 * @param m
	 *            second fraction
	 * @return true if fractions this and m are equal
	 */
	@Override
	public boolean equals(Object m) {
		return compareTo((Answer) m) == 0;
	}

	// Parem lisameetod suurima ühisteguri leidmiseks
	// http://www.vogella.de/articles/JavaAlgorithmsEuclid/article.html
	public static int syt(int p, int q) {
		if (q == 0) {
			return Math.abs(p);
		}
		return syt(q, p % q);
	}

    //Lahenduses kasutatud esialgne lisameetod suurima ühisteguri leidmiseks mis aga ei ole kõige parem variant
//	static Answer suurimYhistegur(Answer m) {
//		int yhistegur = 0;
//		int v2iksem = 0;
//		int jagaja = 1;
//		if (Math.abs(m.getNumerator()) < Math.abs(m.getDenominator())) {
//			v2iksem = Math.abs(m.getNumerator());
//		} else if (Math.abs(m.getNumerator()) > Math.abs(m.getDenominator())) {
//			v2iksem = Math.abs(m.getDenominator());
//		} else
//			v2iksem = Math.abs(m.getNumerator());
//		while (jagaja < v2iksem) {
//			jagaja++;
//			if (m.getNumerator() % (jagaja - 1) == 0
//					&& m.getDenominator() % (jagaja - 1) == 0) {
//				yhistegur = jagaja - 1;
//			}
//		}
//		if (yhistegur == 0) {
//			return m;
//		}
//		return new Answer(m.getNumerator() / yhistegur, m.getDenominator()
//				/ yhistegur);
//	}

	/**
	 * Sum of fractions.
	 * 
	 * @param m
	 *            second addend
	 * @return this+m
	 */
	public Answer plus(Answer m) {
		int pealmine = lugeja * m.getDenominator() + m.getNumerator()
				* nimetaja;
		int alumine = nimetaja * m.getDenominator();
		return new Answer(pealmine, alumine);
	}

	/**
	 * Multiplication of fractions.
	 * 
	 * @param m
	 *            second factor
	 * @return this*m
	 */
	public Answer times(Answer m) {
		int pealmine = lugeja * m.getNumerator();
		int alumine = nimetaja * m.getDenominator();
		return new Answer(pealmine, alumine);
	}

	/**
	 * Inverse of the fraction. n/d becomes d/n.
	 * 
	 * @return inverse of this fraction: 1/this
	 */
	public Answer inverse() {
		if (lugeja == 0)
			throw new ArithmeticException("Tekib nulliga jagamine!");
		return new Answer(nimetaja, lugeja);
	}

	/**
	 * Opposite of the fraction. n/d becomes -n/d.
	 * 
	 * @return opposite of this fraction: -this
	 */
	public Answer opposite() {
		return new Answer(lugeja * (-1), nimetaja);
	}

	/**
	 * Difference of fractions.
	 * 
	 * @param m
	 *            subtrahend
	 * @return this-m
	 */
	public Answer minus(Answer m) {
		return plus(m.opposite());
	}

	/**
	 * Quotient of fractions.
	 * 
	 * @param m
	 *            divisor
	 * @return this/m
	 */
	public Answer divideBy(Answer m) {
		if (m.getNumerator() != 0) {
			int x = lugeja * m.getDenominator();
			int y = nimetaja * m.getNumerator();
			return new Answer(x,y);
		} else
			throw new ArithmeticException("Tekib nulliga jagamine!");
	}

	/**
	 * Comparision of fractions.
	 * 
	 * @param m
	 *            second fraction
	 * @return -1 if this < m; 0 if this==m; 1 if this > m
	 */
	public int compareTo(Answer m) {
		int esimene = lugeja * m.getDenominator();
		int teine = nimetaja * m.getNumerator();
		if (esimene == teine)
			return 0;
		else if (esimene > teine)
			return 1;
		else if (esimene < teine)
			return -1;
		else
			throw new ArithmeticException("");
	}

	/**
	 * Clone of the fraction.
	 * 
	 * @return new fraction equal to this
	 */
	@Override
	public Object clone() throws CloneNotSupportedException {
		return new Answer(lugeja, nimetaja);
	}

	/**
	 * Integer part of the (improper) fraction.
	 * 
	 * @return integer part of this fraction
	 */
	public int integerPart() {
		return lugeja / nimetaja;
	}

	/**
	 * Extract fraction part of the (improper) fraction (a proper fraction
	 * without the integer part).
	 * 
	 * @return fraction part of this fraction
	 */
	public Answer fractionPart() {
		if (integerPart() == 0) {
			return this;
		} else {
			int murd = lugeja - (integerPart() * nimetaja);
			return new Answer(murd, nimetaja);
		}
	}

	/**
	 * Approximate value of the fraction.
	 * 
	 * @return numeric value of this fraction
	 */
	public double toDouble() {
		return ((double) lugeja) / ((double) nimetaja);
	}

	/**
	 * Double value f presented as a fraction with denominator d > 0.
	 * 
	 * @param f
	 *            real number
	 * @param d
	 *            positive denominator for the result
	 * @return f as an approximate fraction of form n/d
	 */
	public static Answer toAnswer(double f, int d) {
		int z = (int) Math.round(d * f);
		return new Answer(z, d);
	}

	/**
	 * Conversion from string to the fraction. Accepts strings of form that is
	 * defined by the toString method.
	 * 
	 * @param s
	 *            string form (as produced by toString) of the fraction
	 * @return fraction represented by s
	 */
	public static Answer valueOf(String s) {
		String[] viimane = s.split("/");
		if (viimane == null || viimane.length != 2) {
			throw new RuntimeException("Sisestatu ei ole see, mis peaks!");
		}
		return new Answer(Integer.parseInt(viimane[0]),
				Integer.parseInt(viimane[1]));
	}
}
